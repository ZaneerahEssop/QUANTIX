{"ast":null,"code":"import{useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{supabase}from\"../client\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function PostSignupRedirect(){const navigate=useNavigate();useEffect(()=>{async function handleRedirect(){const{data:{session}}=await supabase.auth.getSession();if(!session||!session.user){navigate(\"/login\");return;}// Get role from sessionStorage\nconst role=sessionStorage.getItem(\"signupRole\");if(role){// Check if user exists in users table\nconst{data:userExists}=await supabase.from(\"users\").select(\"user_id\").eq(\"user_id\",session.user.id).single();if(!userExists){var _session$user$user_me;// Upsert user into users table (insert or update)\nconst{error:insertError}=await supabase.from(\"users\").upsert([{user_id:session.user.id,name:((_session$user$user_me=session.user.user_metadata)===null||_session$user$user_me===void 0?void 0:_session$user$user_me.name)||\"\",user_role:role,is_admin:false,created_at:new Date().toISOString()}]);if(insertError){console.error(\"Error inserting user:\",insertError.message);}}// Clear the role from sessionStorage after use\nsessionStorage.removeItem('signupRole');// Determine the correct path based on role\nconst redirectPath=role===\"planner\"?\"/planner-form\":role===\"vendor\"?\"/vendor-form\":\"/\";// Use the current origin to ensure we stay on the same domain\nconst redirectUrl=\"\".concat(window.location.origin).concat(redirectPath);console.log('Redirecting to:',redirectUrl);// Debug log\nwindow.location.href=redirectUrl;}else{// If no role, fallback to dashboard\nnavigate(\"/dashboard\");}}handleRedirect();},[navigate]);return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}","map":{"version":3,"names":["useEffect","useNavigate","supabase","jsx","_jsx","PostSignupRedirect","navigate","handleRedirect","data","session","auth","getSession","user","role","sessionStorage","getItem","userExists","from","select","eq","id","single","_session$user$user_me","error","insertError","upsert","user_id","name","user_metadata","user_role","is_admin","created_at","Date","toISOString","console","message","removeItem","redirectPath","redirectUrl","concat","window","location","origin","log","href","children"],"sources":["C:/Users/Ammaarah/EventuallyPerfect/QUANTIX/frontend/src/pages/PostSignupRedirect.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { supabase } from \"../client\";\r\n\r\nexport default function PostSignupRedirect() {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    async function handleRedirect() {\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n      if (!session || !session.user) {\r\n        navigate(\"/login\");\r\n        return;\r\n      }\r\n      // Get role from sessionStorage\r\n      const role = sessionStorage.getItem(\"signupRole\");\r\n      if (role) {\r\n        // Check if user exists in users table\r\n        const { data: userExists } = await supabase\r\n          .from(\"users\")\r\n          .select(\"user_id\")\r\n          .eq(\"user_id\", session.user.id)\r\n          .single();\r\n        if (!userExists) {\r\n            // Upsert user into users table (insert or update)\r\n            const { error: insertError } = await supabase.from(\"users\").upsert([\r\n              {\r\n                user_id: session.user.id,\r\n                name: session.user.user_metadata?.name || \"\",\r\n                user_role: role,\r\n                is_admin: false,\r\n                created_at: new Date().toISOString(),\r\n              },\r\n            ]);\r\n            if (insertError) {\r\n              console.error(\"Error inserting user:\", insertError.message);\r\n            }\r\n        }\r\n        // Clear the role from sessionStorage after use\r\n        sessionStorage.removeItem('signupRole');\r\n        \r\n        // Determine the correct path based on role\r\n        const redirectPath = role === \"planner\" ? \"/planner-form\" : \r\n                           role === \"vendor\" ? \"/vendor-form\" : \"/\";\r\n        \r\n        // Use the current origin to ensure we stay on the same domain\r\n        const redirectUrl = `${window.location.origin}${redirectPath}`;\r\n        console.log('Redirecting to:', redirectUrl); // Debug log\r\n        window.location.href = redirectUrl;\r\n      } else {\r\n        // If no role, fallback to dashboard\r\n        navigate(\"/dashboard\");\r\n      }\r\n    }\r\n    handleRedirect();\r\n  }, [navigate]);\r\n\r\n  return <div>Loading...</div>;\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,QAAQ,KAAQ,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAErC,cAAe,SAAS,CAAAC,kBAAkBA,CAAA,CAAG,CAC3C,KAAM,CAAAC,QAAQ,CAAGL,WAAW,CAAC,CAAC,CAE9BD,SAAS,CAAC,IAAM,CACd,cAAe,CAAAO,cAAcA,CAAA,CAAG,CAC9B,KAAM,CACJC,IAAI,CAAE,CAAEC,OAAQ,CAClB,CAAC,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAACC,UAAU,CAAC,CAAC,CACpC,GAAI,CAACF,OAAO,EAAI,CAACA,OAAO,CAACG,IAAI,CAAE,CAC7BN,QAAQ,CAAC,QAAQ,CAAC,CAClB,OACF,CACA;AACA,KAAM,CAAAO,IAAI,CAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CACjD,GAAIF,IAAI,CAAE,CACR;AACA,KAAM,CAAEL,IAAI,CAAEQ,UAAW,CAAC,CAAG,KAAM,CAAAd,QAAQ,CACxCe,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,SAAS,CAAC,CACjBC,EAAE,CAAC,SAAS,CAAEV,OAAO,CAACG,IAAI,CAACQ,EAAE,CAAC,CAC9BC,MAAM,CAAC,CAAC,CACX,GAAI,CAACL,UAAU,CAAE,KAAAM,qBAAA,CACb;AACA,KAAM,CAAEC,KAAK,CAAEC,WAAY,CAAC,CAAG,KAAM,CAAAtB,QAAQ,CAACe,IAAI,CAAC,OAAO,CAAC,CAACQ,MAAM,CAAC,CACjE,CACEC,OAAO,CAAEjB,OAAO,CAACG,IAAI,CAACQ,EAAE,CACxBO,IAAI,CAAE,EAAAL,qBAAA,CAAAb,OAAO,CAACG,IAAI,CAACgB,aAAa,UAAAN,qBAAA,iBAA1BA,qBAAA,CAA4BK,IAAI,GAAI,EAAE,CAC5CE,SAAS,CAAEhB,IAAI,CACfiB,QAAQ,CAAE,KAAK,CACfC,UAAU,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACrC,CAAC,CACF,CAAC,CACF,GAAIT,WAAW,CAAE,CACfU,OAAO,CAACX,KAAK,CAAC,uBAAuB,CAAEC,WAAW,CAACW,OAAO,CAAC,CAC7D,CACJ,CACA;AACArB,cAAc,CAACsB,UAAU,CAAC,YAAY,CAAC,CAEvC;AACA,KAAM,CAAAC,YAAY,CAAGxB,IAAI,GAAK,SAAS,CAAG,eAAe,CACtCA,IAAI,GAAK,QAAQ,CAAG,cAAc,CAAG,GAAG,CAE3D;AACA,KAAM,CAAAyB,WAAW,IAAAC,MAAA,CAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAAH,MAAA,CAAGF,YAAY,CAAE,CAC9DH,OAAO,CAACS,GAAG,CAAC,iBAAiB,CAAEL,WAAW,CAAC,CAAE;AAC7CE,MAAM,CAACC,QAAQ,CAACG,IAAI,CAAGN,WAAW,CACpC,CAAC,IAAM,CACL;AACAhC,QAAQ,CAAC,YAAY,CAAC,CACxB,CACF,CACAC,cAAc,CAAC,CAAC,CAClB,CAAC,CAAE,CAACD,QAAQ,CAAC,CAAC,CAEd,mBAAOF,IAAA,QAAAyC,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
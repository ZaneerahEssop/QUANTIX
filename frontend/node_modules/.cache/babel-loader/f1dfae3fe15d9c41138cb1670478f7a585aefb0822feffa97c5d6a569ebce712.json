{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ammaarah\\\\EventuallyPerfect\\\\QUANTIX\\\\frontend\\\\src\\\\pages\\\\PostSignupRedirect.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"../client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostSignupRedirect() {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function handleRedirect() {\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (!session || !session.user) {\n        navigate(\"/login\");\n        return;\n      }\n      // Get role from sessionStorage\n      const role = sessionStorage.getItem(\"signupRole\");\n      if (role) {\n        // Check if user exists in users table\n        const {\n          data: userExists\n        } = await supabase.from(\"users\").select(\"user_id\").eq(\"user_id\", session.user.id).single();\n        if (!userExists) {\n          var _session$user$user_me;\n          // Upsert user into users table (insert or update)\n          const {\n            error: insertError\n          } = await supabase.from(\"users\").upsert([{\n            user_id: session.user.id,\n            name: ((_session$user$user_me = session.user.user_metadata) === null || _session$user$user_me === void 0 ? void 0 : _session$user$user_me.name) || \"\",\n            user_role: role,\n            is_admin: false,\n            created_at: new Date().toISOString()\n          }]);\n          if (insertError) {\n            console.error(\"Error inserting user:\", insertError.message);\n          }\n        }\n        // Clear the role from sessionStorage after use\n        sessionStorage.removeItem('signupRole');\n\n        // Determine the correct path based on role\n        const redirectPath = role === \"planner\" ? \"/planner-form\" : role === \"vendor\" ? \"/vendor-form\" : \"/\";\n\n        // Use the current origin to ensure we stay on the same domain\n        const redirectUrl = `${window.location.origin}${redirectPath}`;\n        console.log('Redirecting to:', redirectUrl); // Debug log\n        window.location.href = redirectUrl;\n      } else {\n        // If no role, fallback to dashboard\n        navigate(\"/dashboard\");\n      }\n    }\n    handleRedirect();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n}\n_s(PostSignupRedirect, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = PostSignupRedirect;\nvar _c;\n$RefreshReg$(_c, \"PostSignupRedirect\");","map":{"version":3,"names":["useEffect","useNavigate","supabase","jsxDEV","_jsxDEV","PostSignupRedirect","_s","navigate","handleRedirect","data","session","auth","getSession","user","role","sessionStorage","getItem","userExists","from","select","eq","id","single","_session$user$user_me","error","insertError","upsert","user_id","name","user_metadata","user_role","is_admin","created_at","Date","toISOString","console","message","removeItem","redirectPath","redirectUrl","window","location","origin","log","href","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ammaarah/EventuallyPerfect/QUANTIX/frontend/src/pages/PostSignupRedirect.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { supabase } from \"../client\";\r\n\r\nexport default function PostSignupRedirect() {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    async function handleRedirect() {\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n      if (!session || !session.user) {\r\n        navigate(\"/login\");\r\n        return;\r\n      }\r\n      // Get role from sessionStorage\r\n      const role = sessionStorage.getItem(\"signupRole\");\r\n      if (role) {\r\n        // Check if user exists in users table\r\n        const { data: userExists } = await supabase\r\n          .from(\"users\")\r\n          .select(\"user_id\")\r\n          .eq(\"user_id\", session.user.id)\r\n          .single();\r\n        if (!userExists) {\r\n            // Upsert user into users table (insert or update)\r\n            const { error: insertError } = await supabase.from(\"users\").upsert([\r\n              {\r\n                user_id: session.user.id,\r\n                name: session.user.user_metadata?.name || \"\",\r\n                user_role: role,\r\n                is_admin: false,\r\n                created_at: new Date().toISOString(),\r\n              },\r\n            ]);\r\n            if (insertError) {\r\n              console.error(\"Error inserting user:\", insertError.message);\r\n            }\r\n        }\r\n        // Clear the role from sessionStorage after use\r\n        sessionStorage.removeItem('signupRole');\r\n        \r\n        // Determine the correct path based on role\r\n        const redirectPath = role === \"planner\" ? \"/planner-form\" : \r\n                           role === \"vendor\" ? \"/vendor-form\" : \"/\";\r\n        \r\n        // Use the current origin to ensure we stay on the same domain\r\n        const redirectUrl = `${window.location.origin}${redirectPath}`;\r\n        console.log('Redirecting to:', redirectUrl); // Debug log\r\n        window.location.href = redirectUrl;\r\n      } else {\r\n        // If no role, fallback to dashboard\r\n        navigate(\"/dashboard\");\r\n      }\r\n    }\r\n    handleRedirect();\r\n  }, [navigate]);\r\n\r\n  return <div>Loading...</div>;\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,eAAeQ,cAAcA,CAAA,EAAG;MAC9B,MAAM;QACJC,IAAI,EAAE;UAAEC;QAAQ;MAClB,CAAC,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAACC,UAAU,CAAC,CAAC;MACpC,IAAI,CAACF,OAAO,IAAI,CAACA,OAAO,CAACG,IAAI,EAAE;QAC7BN,QAAQ,CAAC,QAAQ,CAAC;QAClB;MACF;MACA;MACA,MAAMO,IAAI,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;MACjD,IAAIF,IAAI,EAAE;QACR;QACA,MAAM;UAAEL,IAAI,EAAEQ;QAAW,CAAC,GAAG,MAAMf,QAAQ,CACxCgB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,SAAS,CAAC,CACjBC,EAAE,CAAC,SAAS,EAAEV,OAAO,CAACG,IAAI,CAACQ,EAAE,CAAC,CAC9BC,MAAM,CAAC,CAAC;QACX,IAAI,CAACL,UAAU,EAAE;UAAA,IAAAM,qBAAA;UACb;UACA,MAAM;YAAEC,KAAK,EAAEC;UAAY,CAAC,GAAG,MAAMvB,QAAQ,CAACgB,IAAI,CAAC,OAAO,CAAC,CAACQ,MAAM,CAAC,CACjE;YACEC,OAAO,EAAEjB,OAAO,CAACG,IAAI,CAACQ,EAAE;YACxBO,IAAI,EAAE,EAAAL,qBAAA,GAAAb,OAAO,CAACG,IAAI,CAACgB,aAAa,cAAAN,qBAAA,uBAA1BA,qBAAA,CAA4BK,IAAI,KAAI,EAAE;YAC5CE,SAAS,EAAEhB,IAAI;YACfiB,QAAQ,EAAE,KAAK;YACfC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACrC,CAAC,CACF,CAAC;UACF,IAAIT,WAAW,EAAE;YACfU,OAAO,CAACX,KAAK,CAAC,uBAAuB,EAAEC,WAAW,CAACW,OAAO,CAAC;UAC7D;QACJ;QACA;QACArB,cAAc,CAACsB,UAAU,CAAC,YAAY,CAAC;;QAEvC;QACA,MAAMC,YAAY,GAAGxB,IAAI,KAAK,SAAS,GAAG,eAAe,GACtCA,IAAI,KAAK,QAAQ,GAAG,cAAc,GAAG,GAAG;;QAE3D;QACA,MAAMyB,WAAW,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGJ,YAAY,EAAE;QAC9DH,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEJ,WAAW,CAAC,CAAC,CAAC;QAC7CC,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAGL,WAAW;MACpC,CAAC,MAAM;QACL;QACAhC,QAAQ,CAAC,YAAY,CAAC;MACxB;IACF;IACAC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,oBAAOH,OAAA;IAAAyC,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC9B;AAAC3C,EAAA,CAxDuBD,kBAAkB;EAAA,QACvBJ,WAAW;AAAA;AAAAiD,EAAA,GADN7C,kBAAkB;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
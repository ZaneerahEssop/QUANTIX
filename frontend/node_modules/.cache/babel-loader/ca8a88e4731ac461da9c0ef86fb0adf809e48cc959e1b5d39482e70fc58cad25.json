{"ast":null,"code":"import { io } from \"socket.io-client\";\nclass ChatService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.listeners = new Map();\n    this.API_URL = this.getApiUrl();\n  }\n  getApiUrl() {\n    if (process.env.REACT_APP_BASE_URL) {\n      return process.env.REACT_APP_BASE_URL;\n    }\n    if (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\n      return \"http://localhost:5000\";\n    } else {\n      return window.location.origin;\n    }\n  }\n  connect(userId) {\n    if (this.socket && this.isConnected) {\n      return;\n    }\n    console.log(\"Connecting to chat server at:\", this.API_URL);\n    this.socket = io(this.API_URL, {\n      transports: [\"websocket\", \"polling\"],\n      autoConnect: true\n    });\n    this.socket.on(\"connect\", () => {\n      console.log(\"Connected to chat server\");\n      this.isConnected = true;\n      this.socket.emit(\"join\", userId);\n    });\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from chat server\");\n      this.isConnected = false;\n    });\n    this.socket.on(\"connect_error\", error => {\n      console.error(\"Connection error:\", error);\n      this.isConnected = false;\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Join a conversation room\n  joinConversation(conversationId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit(\"join_conversation\", conversationId);\n    }\n  }\n\n  // Send a message\n  sendMessage(conversationId, senderId, messageText, messageType = \"text\") {\n    if (this.socket && this.isConnected) {\n      this.socket.emit(\"send_message\", {\n        conversationId,\n        senderId,\n        messageText,\n        messageType\n      });\n    }\n  }\n\n  // Send typing indicator\n  sendTyping(conversationId, userId, isTyping) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit(\"typing\", {\n        conversationId,\n        userId,\n        isTyping\n      });\n    }\n  }\n\n  // Listen for new messages\n  onNewMessage(callback) {\n    if (this.socket) {\n      this.socket.on(\"new_message\", callback);\n    }\n  }\n\n  // Listen for message errors\n  onMessageError(callback) {\n    if (this.socket) {\n      this.socket.on(\"message_error\", callback);\n    }\n  }\n\n  // Listen for typing indicators\n  onTyping(callback) {\n    if (this.socket) {\n      this.socket.on(\"user_typing\", callback);\n    }\n  }\n\n  // Listen for message notifications\n  onMessageNotification(callback) {\n    if (this.socket) {\n      this.socket.on(\"message_notification\", callback);\n    }\n  }\n\n  // Remove all listeners\n  removeAllListeners() {\n    if (this.socket) {\n      this.socket.removeAllListeners();\n    }\n  }\n\n  // API calls for chat data\n  async getOrCreateConversation(plannerId, vendorId, eventId = null) {\n    const response = await fetch(`${this.API_URL}/api/chat/conversations`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        plannerId,\n        vendorId,\n        eventId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to get or create conversation\");\n    }\n    return response.json();\n  }\n  async getUserConversations(userId) {\n    const response = await fetch(`${this.API_URL}/api/chat/conversations/${userId}`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch conversations\");\n    }\n    return response.json();\n  }\n  async getConversationMessages(conversationId, page = 1, limit = 50) {\n    const response = await fetch(`${this.API_URL}/api/chat/conversations/${conversationId}/messages?page=${page}&limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch messages\");\n    }\n    return response.json();\n  }\n  async sendMessageAPI(conversationId, senderId, messageText, messageType = \"text\") {\n    const response = await fetch(`${this.API_URL}/api/chat/messages`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        conversationId,\n        senderId,\n        messageText,\n        messageType\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to send message\");\n    }\n    return response.json();\n  }\n  async markMessagesAsRead(conversationId, userId) {\n    const response = await fetch(`${this.API_URL}/api/chat/messages/read`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        conversationId,\n        userId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to mark messages as read\");\n    }\n    return response.json();\n  }\n  async getUnreadCount(userId) {\n    console.log(\"Fetching unread count for user:\", userId);\n    console.log(\"API URL:\", `${this.API_URL}/api/chat/unread/${userId}`);\n    const response = await fetch(`${this.API_URL}/api/chat/unread/${userId}`);\n    console.log(\"Unread count response status:\", response.status);\n    console.log(\"Unread count response ok:\", response.ok);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Unread count API Error Response:\", errorText);\n      throw new Error(`Failed to fetch unread count: ${response.status} - ${errorText}`);\n    }\n    const data = await response.json();\n    console.log(\"Unread count data:\", data);\n    return data;\n  }\n}\n\n// Create a singleton instance\nconst chatService = new ChatService();\nexport default chatService;","map":{"version":3,"names":["io","ChatService","constructor","socket","isConnected","listeners","Map","API_URL","getApiUrl","process","env","REACT_APP_BASE_URL","window","location","hostname","origin","connect","userId","console","log","transports","autoConnect","on","emit","error","disconnect","joinConversation","conversationId","sendMessage","senderId","messageText","messageType","sendTyping","isTyping","onNewMessage","callback","onMessageError","onTyping","onMessageNotification","removeAllListeners","getOrCreateConversation","plannerId","vendorId","eventId","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","getUserConversations","getConversationMessages","page","limit","sendMessageAPI","markMessagesAsRead","getUnreadCount","status","errorText","text","data","chatService"],"sources":["C:/Users/Ammaarah/EventuallyPerfect/QUANTIX/frontend/src/services/chatService.js"],"sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nclass ChatService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.listeners = new Map();\r\n    this.API_URL = this.getApiUrl();\r\n  }\r\n\r\n  getApiUrl() {\r\n    if (process.env.REACT_APP_BASE_URL) {\r\n      return process.env.REACT_APP_BASE_URL;\r\n    }\r\n\r\n    if (\r\n      window.location.hostname === \"localhost\" ||\r\n      window.location.hostname === \"127.0.0.1\"\r\n    ) {\r\n      return \"http://localhost:5000\";\r\n    } else {\r\n      return window.location.origin;\r\n    }\r\n  }\r\n\r\n  connect(userId) {\r\n    if (this.socket && this.isConnected) {\r\n      return;\r\n    }\r\n\r\n    console.log(\"Connecting to chat server at:\", this.API_URL);\r\n\r\n    this.socket = io(this.API_URL, {\r\n      transports: [\"websocket\", \"polling\"],\r\n      autoConnect: true,\r\n    });\r\n\r\n    this.socket.on(\"connect\", () => {\r\n      console.log(\"Connected to chat server\");\r\n      this.isConnected = true;\r\n      this.socket.emit(\"join\", userId);\r\n    });\r\n\r\n    this.socket.on(\"disconnect\", () => {\r\n      console.log(\"Disconnected from chat server\");\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on(\"connect_error\", (error) => {\r\n      console.error(\"Connection error:\", error);\r\n      this.isConnected = false;\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  // Join a conversation room\r\n  joinConversation(conversationId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit(\"join_conversation\", conversationId);\r\n    }\r\n  }\r\n\r\n  // Send a message\r\n  sendMessage(conversationId, senderId, messageText, messageType = \"text\") {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit(\"send_message\", {\r\n        conversationId,\r\n        senderId,\r\n        messageText,\r\n        messageType,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Send typing indicator\r\n  sendTyping(conversationId, userId, isTyping) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit(\"typing\", {\r\n        conversationId,\r\n        userId,\r\n        isTyping,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Listen for new messages\r\n  onNewMessage(callback) {\r\n    if (this.socket) {\r\n      this.socket.on(\"new_message\", callback);\r\n    }\r\n  }\r\n\r\n  // Listen for message errors\r\n  onMessageError(callback) {\r\n    if (this.socket) {\r\n      this.socket.on(\"message_error\", callback);\r\n    }\r\n  }\r\n\r\n  // Listen for typing indicators\r\n  onTyping(callback) {\r\n    if (this.socket) {\r\n      this.socket.on(\"user_typing\", callback);\r\n    }\r\n  }\r\n\r\n  // Listen for message notifications\r\n  onMessageNotification(callback) {\r\n    if (this.socket) {\r\n      this.socket.on(\"message_notification\", callback);\r\n    }\r\n  }\r\n\r\n  // Remove all listeners\r\n  removeAllListeners() {\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n    }\r\n  }\r\n\r\n  // API calls for chat data\r\n  async getOrCreateConversation(plannerId, vendorId, eventId = null) {\r\n    const response = await fetch(`${this.API_URL}/api/chat/conversations`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        plannerId,\r\n        vendorId,\r\n        eventId,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to get or create conversation\");\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getUserConversations(userId) {\r\n    const response = await fetch(\r\n      `${this.API_URL}/api/chat/conversations/${userId}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch conversations\");\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getConversationMessages(conversationId, page = 1, limit = 50) {\r\n    const response = await fetch(\r\n      `${this.API_URL}/api/chat/conversations/${conversationId}/messages?page=${page}&limit=${limit}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch messages\");\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async sendMessageAPI(\r\n    conversationId,\r\n    senderId,\r\n    messageText,\r\n    messageType = \"text\"\r\n  ) {\r\n    const response = await fetch(`${this.API_URL}/api/chat/messages`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        conversationId,\r\n        senderId,\r\n        messageText,\r\n        messageType,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to send message\");\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async markMessagesAsRead(conversationId, userId) {\r\n    const response = await fetch(`${this.API_URL}/api/chat/messages/read`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        conversationId,\r\n        userId,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to mark messages as read\");\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getUnreadCount(userId) {\r\n    console.log(\"Fetching unread count for user:\", userId);\r\n    console.log(\"API URL:\", `${this.API_URL}/api/chat/unread/${userId}`);\r\n\r\n    const response = await fetch(`${this.API_URL}/api/chat/unread/${userId}`);\r\n\r\n    console.log(\"Unread count response status:\", response.status);\r\n    console.log(\"Unread count response ok:\", response.ok);\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\"Unread count API Error Response:\", errorText);\r\n      throw new Error(\r\n        `Failed to fetch unread count: ${response.status} - ${errorText}`\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Unread count data:\", data);\r\n    return data;\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst chatService = new ChatService();\r\nexport default chatService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}